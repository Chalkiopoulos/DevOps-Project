name: push-workflow

on: 
  workflow_dispatch:
  push:
    branches:
      - main
    paths-ignore:
      - '*.md'

jobs:
  test_encryption_code:
    environment: Testing
    runs-on: ubuntu-latest
    container: python:3.11
    steps:
      - name: get the code
        uses: actions/checkout@v4

      - name: cache dependecies # caching the cryptography library to accelerate jobs
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: deps-${{ runner.os }}-${{ hashFiles('dependencies.txt') }}

      - name: install dependencies
        run: pip install -r dependencies.txt

      - name: test code
        run: python Scripts/test.py


  test_DB:
    runs-on: ubuntu-latest
    environment: Testing
    container: python:3.11
    services:
      mysqldb:
        image: mysql:latest
        env:
          MYSQL_ROOT_PASSWORD: ${{secrets.DB_PASSWORD}}
          MYSQL_DATABASE: devopsdb
        ports:
          - 3306:3306
        volumes:
        - ./db/:/docker-entrypoint-initdb.d/schema.sql
         # here the service container reads the schema from .db/schema on my repo and initializes the database

    env:
      DB_HOST: "mysqldb"
      DB_PORT: "3306"
      DB_USER: root
      DB_PASSWORD: ${{secrets.DB_PASSWORD}}
      DB_NAME: devopsdb

    steps:
  
      - name: Wait for MySQL to be ready # mySQL sometimes needs time to setup so i wait before python script tries to connect
        run: sleep 10

      - name: get the code
        uses: actions/checkout@v4

      - name: cache dependecies # caching the cryptography library to accelerate jobs
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: deps-${{ runner.os }}-${{ hashFiles('dependencies.txt') }}

      - name: install dependencies
        run: pip install -r dependencies.txt

      - name: test Database 
        run: python Scripts/database_test.py



  Build_and_upload_encryptions:  #encryptions work somewhat like a build that I upload as an artifact, here i also publish some output of the number of encryptiosn
    needs: [test_encryption_code,test_DB]
    runs-on: ubuntu-latest
    container: python:3.11
    defaults:
      run:
        shell: bash
    outputs: 
      number_of_lines: ${{steps.counter.outputs.line_count}}
    steps:
      - name: get the code
        uses: actions/checkout@v4
      
      - name: cache dependecies # caching the cryptography library to accelerate jobs
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: deps-${{ runner.os }}-${{ hashFiles('dependencies.txt') }}

      - name: install dependencies
        run: pip install -r dependencies.txt

      - name: make a key
        run: python Scripts/create_key.py

      - name: run code # create the encryptions
        run: python Scripts/main.py
      
      - name: check environment value
        run: echo ${{ vars.ENVIRONMENT_VALUE }}
      
      - name: upload the encryptions
        uses: actions/upload-artifact@v4
        with:
          name: 'encryptions-${{ runner.os}}'
          path: ./encrypted_passwords*.txt

      - name: publish number of encryptions # I count the number of passwords encrypted to learn about github outputs
        id: counter
        run: |
          line_count=$(cat ./encrypted_passwords*.txt | wc -l)
          echo "line_count=$line_count" >> "$GITHUB_OUTPUT"
   
  download_and_show_artifact: # this job showcases how to download artiacts and also how to get outputs from another job
    runs-on: ubuntu-latest
    container: python:3.11
    needs: Build_and_upload_encryptions
    defaults:
      run:
        shell: bash
    steps:
      - name: download encryptions
        uses: actions/download-artifact@v4
        with:
          name: 'encryptions-${{ runner.os }}'
      
      - name: print number of lines from output
        run: echo "this file contains ${{needs.Build_and_upload_encryptions.outputs.number_of_lines}} encrypted passwords"
      
      - name: print_contents
        run: cat ./encrypted_passwords*.txt

  fail_report:
    runs-on: Ubuntu-latest
    needs: [test_encryption_code,test_DB, Build_and_upload_encryptions,download_and_show_artifact]
    if: failure()
    steps:
      - name: print the full report
        run: echo "${{toJson(github)}}"

  

      

    